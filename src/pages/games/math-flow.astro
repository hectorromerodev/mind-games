---
import BaseGame from '../../components/game/BaseGame.astro';
import GameControls from '../../components/game/GameControls.astro';
import GameInstructions from '../../components/game/GameInstructions.astro';

const instructionSections = [
  {
    title: 'How to Play',
    icon: 'üéØ',
    color: 'blue' as const,
    items: [
      'You\'ll start with a number (e.g., 25)',
      'Use this number in the next calculation',
      'Your answer becomes the next starting number',
      'Choose the correct answer from 4 options',
      'Start with 0 lives - get your first answer right!'
    ]
  },
  {
    title: 'Lives System',
    icon: '‚ù§Ô∏è',
    color: 'red' as const,
    items: [
      'Start with 0 lives',
      'Gain 1 life for each correct answer (max 15)',
      'Lose 1 life for each wrong answer',
      'Game ends when you have negative lives'
    ]
  },
  {
    title: 'Skills Developed',
    icon: 'üß†',
    color: 'purple' as const,
    items: [
      'Mental arithmetic',
      'Working memory',
      'Focus and concentration',
      'Processing speed'
    ]
  },
  {
    title: 'Challenge',
    icon: '‚ö†Ô∏è',
    color: 'orange' as const,
    items: [
      'Ignore the distracting numbers and symbols around the edges',
      'Focus only on the main calculation in the center!'
    ]
  },
  {
    title: 'Scoring',
    icon: 'üìä',
    color: 'green' as const,
    items: [
      'Correct answers: Points based on speed',
      'Streak bonus: Extra points for consecutive correct answers',
      'Time pressure: Faster answers = higher scores'
    ]
  }
];
---

<BaseGame 
  gameTitle="Math Flow"
  gameIcon="‚ûï"
  description="Use your answer from the previous calculation to perform the current calculations. Ignore the distractions!"
  maxTime={120}
>
  <div slot="instructions-content">
    <GameInstructions sections={instructionSections} />
  </div>
  
  <div slot="game-content">
    <!-- Lives Display -->
    <div class="absolute top-4 right-4 z-20">
      <div id="livesDisplay" class="bg-black/50 backdrop-blur-sm rounded-lg px-4 py-2 text-white font-bold">
        <span class="text-red-400">‚ù§Ô∏è</span> Lives: <span id="livesCount">0</span>
      </div>
    </div>
    
    <!-- Game Content Container with reduced height -->
    <div class="relative w-full h-64 min-h-64 flex flex-col justify-center items-center">
      <!-- Distraction Area (absolute positioned to cover entire game area) -->
      <div class="absolute inset-0 w-full h-full pointer-events-none" id="distractionArea">
        <!-- Distractions will be positioned here -->
      </div>
      
      <!-- Math Problem Display -->
      <div id="mathProblem" class="mb-4 relative z-10">
        <!-- Problem will be inserted here by JavaScript -->
      </div>
      
      <!-- Answer Options -->
      <div id="mathOptions" class="mb-4 relative z-10">
        <!-- Options will be inserted here by JavaScript -->
      </div>
    </div>
  </div>
  
  <div slot="game-controls">
    <GameControls showReset={true} />
  </div>
</BaseGame>

<script>
  import { MathFlowGameClass } from '../../utils/MathFlowGameClass.js';
  
  // Initialize game when page loads
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Initializing Math Flow game...');
    
    try {
      // Create global game instance
      window.mathFlowGame = new MathFlowGameClass();
      
      // Set up start button
      const startBtn = document.getElementById('startBtn');
      if (startBtn) {
        startBtn.addEventListener('click', () => {
          console.log('Start button clicked');
          try {
            window.mathFlowGame.startGame();
          } catch (error) {
            console.error('Error starting game:', error);
            alert('Error starting game. Please refresh the page.');
          }
        });
      }
      
      // Set up reset button
      const resetBtn = document.getElementById('resetBtn');
      if (resetBtn) {
        resetBtn.addEventListener('click', () => {
          console.log('Reset button clicked');
          try {
            window.mathFlowGame.resetGame();
          } catch (error) {
            console.error('Error resetting game:', error);
            alert('Error resetting game. Please refresh the page.');
          }
        });
      }
      
      console.log('Math Flow game initialized successfully');
    } catch (error) {
      console.error('Error initializing Math Flow game:', error);
      alert('Error initializing game. Please refresh the page.');
    }
  });
  
  // Add global error handler
  window.addEventListener('error', (event) => {
    console.error('Global error in Math Flow:', event.error);
    if (event.error.message && event.error.message.includes('mathFlowGame')) {
      alert('Game error detected. Please refresh the page.');
    }
  });
  
  // Add global type declaration for TypeScript
  declare global {
    interface Window {
      mathFlowGame: any;
    }
  }
</script>

<style>
  .math-option:hover {
    transform: scale(1.05);
  }
  
  .distraction {
    animation: float 3s ease-in-out infinite;
    transform-origin: center;
  }
  
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-5px) rotate(2deg); }
    50% { transform: translateY(-2px) rotate(-1deg); }
    75% { transform: translateY(-7px) rotate(1deg); }
  }
  
  /* Fade in animation for new problems - only on initial load */
  #mathProblem.new-problem, #mathOptions.new-problem {
    animation: fadeIn 0.5s ease-in;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>
