---
export interface Props {
  variant?: 'primary' | 'secondary' | 'reset' | 'pause' | 'start';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  id?: string;
  onClick?: string;
  class?: string;
}

const { 
  variant = 'primary', 
  size = 'md', 
  disabled = false, 
  id, 
  onClick,
  class: additionalClass = ''
} = Astro.props;

const baseClasses = 'font-bold rounded-xl transition-all duration-300 transform hover:scale-105 active:scale-95 shadow-lg border border-white/20';

const variantClasses = {
  primary: 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white',
  secondary: 'bg-white/10 backdrop-blur-sm hover:bg-white/20 text-white border-white/40',
  reset: 'bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white',
  pause: 'bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white',
  start: 'bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white'
};

const sizeClasses = {
  sm: 'py-2 px-4 text-sm',
  md: 'py-3 px-6 text-base',
  lg: 'py-4 px-8 text-lg'
};

const buttonClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${additionalClass}`;
---

<button 
  class={buttonClasses}
  disabled={disabled}
  id={id}
  onclick={onClick}
>
  <slot />
</button>

<style>
  button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }
  
  button {
    position: relative;
    overflow: hidden;
  }
  
  button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }
  
  button:hover::before {
    left: 100%;
  }
</style>
